// Code generated by go-swagger; DO NOT EDIT.

package data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewHeadListDataParams creates a new HeadListDataParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewHeadListDataParams() *HeadListDataParams {
	return &HeadListDataParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewHeadListDataParamsWithTimeout creates a new HeadListDataParams object
// with the ability to set a timeout on a request.
func NewHeadListDataParamsWithTimeout(timeout time.Duration) *HeadListDataParams {
	return &HeadListDataParams{
		timeout: timeout,
	}
}

// NewHeadListDataParamsWithContext creates a new HeadListDataParams object
// with the ability to set a context for a request.
func NewHeadListDataParamsWithContext(ctx context.Context) *HeadListDataParams {
	return &HeadListDataParams{
		Context: ctx,
	}
}

// NewHeadListDataParamsWithHTTPClient creates a new HeadListDataParams object
// with the ability to set a custom HTTPClient for a request.
func NewHeadListDataParamsWithHTTPClient(client *http.Client) *HeadListDataParams {
	return &HeadListDataParams{
		HTTPClient: client,
	}
}

/* HeadListDataParams contains all the parameters to send to the API endpoint
   for the head list data operation.

   Typically these are written to a http.Request.
*/
type HeadListDataParams struct {

	/* IfNoneMatch.

	   The server will return the requested resource, with a 200 status, only if it doesn't have an ETag matching the given ones. See <https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match> documentation.
	*/
	IfNoneMatch *string

	/* Jsonpath.

	   Json Path expression to extract portions of documents
	*/
	Jsonpath *string

	/* Rego.

	   Rego query to be executed for the documents
	*/
	Rego *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the head list data params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *HeadListDataParams) WithDefaults() *HeadListDataParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the head list data params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *HeadListDataParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the head list data params
func (o *HeadListDataParams) WithTimeout(timeout time.Duration) *HeadListDataParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the head list data params
func (o *HeadListDataParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the head list data params
func (o *HeadListDataParams) WithContext(ctx context.Context) *HeadListDataParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the head list data params
func (o *HeadListDataParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the head list data params
func (o *HeadListDataParams) WithHTTPClient(client *http.Client) *HeadListDataParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the head list data params
func (o *HeadListDataParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIfNoneMatch adds the ifNoneMatch to the head list data params
func (o *HeadListDataParams) WithIfNoneMatch(ifNoneMatch *string) *HeadListDataParams {
	o.SetIfNoneMatch(ifNoneMatch)
	return o
}

// SetIfNoneMatch adds the ifNoneMatch to the head list data params
func (o *HeadListDataParams) SetIfNoneMatch(ifNoneMatch *string) {
	o.IfNoneMatch = ifNoneMatch
}

// WithJsonpath adds the jsonpath to the head list data params
func (o *HeadListDataParams) WithJsonpath(jsonpath *string) *HeadListDataParams {
	o.SetJsonpath(jsonpath)
	return o
}

// SetJsonpath adds the jsonpath to the head list data params
func (o *HeadListDataParams) SetJsonpath(jsonpath *string) {
	o.Jsonpath = jsonpath
}

// WithRego adds the rego to the head list data params
func (o *HeadListDataParams) WithRego(rego *string) *HeadListDataParams {
	o.SetRego(rego)
	return o
}

// SetRego adds the rego to the head list data params
func (o *HeadListDataParams) SetRego(rego *string) {
	o.Rego = rego
}

// WriteToRequest writes these params to a swagger request
func (o *HeadListDataParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IfNoneMatch != nil {

		// header param If-None-Match
		if err := r.SetHeaderParam("If-None-Match", *o.IfNoneMatch); err != nil {
			return err
		}
	}

	if o.Jsonpath != nil {

		// query param jsonpath
		var qrJsonpath string

		if o.Jsonpath != nil {
			qrJsonpath = *o.Jsonpath
		}
		qJsonpath := qrJsonpath
		if qJsonpath != "" {

			if err := r.SetQueryParam("jsonpath", qJsonpath); err != nil {
				return err
			}
		}
	}

	if o.Rego != nil {

		// query param rego
		var qrRego string

		if o.Rego != nil {
			qrRego = *o.Rego
		}
		qRego := qrRego
		if qRego != "" {

			if err := r.SetQueryParam("rego", qRego); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListDataParams creates a new ListDataParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListDataParams() *ListDataParams {
	return &ListDataParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListDataParamsWithTimeout creates a new ListDataParams object
// with the ability to set a timeout on a request.
func NewListDataParamsWithTimeout(timeout time.Duration) *ListDataParams {
	return &ListDataParams{
		timeout: timeout,
	}
}

// NewListDataParamsWithContext creates a new ListDataParams object
// with the ability to set a context for a request.
func NewListDataParamsWithContext(ctx context.Context) *ListDataParams {
	return &ListDataParams{
		Context: ctx,
	}
}

// NewListDataParamsWithHTTPClient creates a new ListDataParams object
// with the ability to set a custom HTTPClient for a request.
func NewListDataParamsWithHTTPClient(client *http.Client) *ListDataParams {
	return &ListDataParams{
		HTTPClient: client,
	}
}

/* ListDataParams contains all the parameters to send to the API endpoint
   for the list data operation.

   Typically these are written to a http.Request.
*/
type ListDataParams struct {

	/* IfNoneMatch.

	   The server will return the requested resource, with a 200 status, only if it doesn't have an ETag matching the given ones. See <https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match> documentation.
	*/
	IfNoneMatch *string

	/* Download.

	   Download data as data.json file
	*/
	Download *bool

	/* Jsonpath.

	   Json Path expression to extract portions of documents
	*/
	Jsonpath *string

	/* Limit.

	     Returns '413 Payload Too Large' response if the body size is greater than given limit.
	The units KB, MB and etc can be used.
	Example: 10 MB; 28 kilobytes; 2000
	*/
	Limit *string

	/* Rego.

	   Rego query to be executed for the documents
	*/
	Rego *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list data params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListDataParams) WithDefaults() *ListDataParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list data params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListDataParams) SetDefaults() {
	var (
		downloadDefault = bool(false)
	)

	val := ListDataParams{
		Download: &downloadDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list data params
func (o *ListDataParams) WithTimeout(timeout time.Duration) *ListDataParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list data params
func (o *ListDataParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list data params
func (o *ListDataParams) WithContext(ctx context.Context) *ListDataParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list data params
func (o *ListDataParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list data params
func (o *ListDataParams) WithHTTPClient(client *http.Client) *ListDataParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list data params
func (o *ListDataParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIfNoneMatch adds the ifNoneMatch to the list data params
func (o *ListDataParams) WithIfNoneMatch(ifNoneMatch *string) *ListDataParams {
	o.SetIfNoneMatch(ifNoneMatch)
	return o
}

// SetIfNoneMatch adds the ifNoneMatch to the list data params
func (o *ListDataParams) SetIfNoneMatch(ifNoneMatch *string) {
	o.IfNoneMatch = ifNoneMatch
}

// WithDownload adds the download to the list data params
func (o *ListDataParams) WithDownload(download *bool) *ListDataParams {
	o.SetDownload(download)
	return o
}

// SetDownload adds the download to the list data params
func (o *ListDataParams) SetDownload(download *bool) {
	o.Download = download
}

// WithJsonpath adds the jsonpath to the list data params
func (o *ListDataParams) WithJsonpath(jsonpath *string) *ListDataParams {
	o.SetJsonpath(jsonpath)
	return o
}

// SetJsonpath adds the jsonpath to the list data params
func (o *ListDataParams) SetJsonpath(jsonpath *string) {
	o.Jsonpath = jsonpath
}

// WithLimit adds the limit to the list data params
func (o *ListDataParams) WithLimit(limit *string) *ListDataParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list data params
func (o *ListDataParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithRego adds the rego to the list data params
func (o *ListDataParams) WithRego(rego *string) *ListDataParams {
	o.SetRego(rego)
	return o
}

// SetRego adds the rego to the list data params
func (o *ListDataParams) SetRego(rego *string) {
	o.Rego = rego
}

// WriteToRequest writes these params to a swagger request
func (o *ListDataParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IfNoneMatch != nil {

		// header param If-None-Match
		if err := r.SetHeaderParam("If-None-Match", *o.IfNoneMatch); err != nil {
			return err
		}
	}

	if o.Download != nil {

		// query param download
		var qrDownload bool

		if o.Download != nil {
			qrDownload = *o.Download
		}
		qDownload := swag.FormatBool(qrDownload)
		if qDownload != "" {

			if err := r.SetQueryParam("download", qDownload); err != nil {
				return err
			}
		}
	}

	if o.Jsonpath != nil {

		// query param jsonpath
		var qrJsonpath string

		if o.Jsonpath != nil {
			qrJsonpath = *o.Jsonpath
		}
		qJsonpath := qrJsonpath
		if qJsonpath != "" {

			if err := r.SetQueryParam("jsonpath", qJsonpath); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Rego != nil {

		// query param rego
		var qrRego string

		if o.Rego != nil {
			qrRego = *o.Rego
		}
		qRego := qrRego
		if qRego != "" {

			if err := r.SetQueryParam("rego", qRego); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

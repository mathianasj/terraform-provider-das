// Code generated by go-swagger; DO NOT EDIT.

package policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetPoliciesParams creates a new GetPoliciesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetPoliciesParams() *GetPoliciesParams {
	return &GetPoliciesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetPoliciesParamsWithTimeout creates a new GetPoliciesParams object
// with the ability to set a timeout on a request.
func NewGetPoliciesParamsWithTimeout(timeout time.Duration) *GetPoliciesParams {
	return &GetPoliciesParams{
		timeout: timeout,
	}
}

// NewGetPoliciesParamsWithContext creates a new GetPoliciesParams object
// with the ability to set a context for a request.
func NewGetPoliciesParamsWithContext(ctx context.Context) *GetPoliciesParams {
	return &GetPoliciesParams{
		Context: ctx,
	}
}

// NewGetPoliciesParamsWithHTTPClient creates a new GetPoliciesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetPoliciesParamsWithHTTPClient(client *http.Client) *GetPoliciesParams {
	return &GetPoliciesParams{
		HTTPClient: client,
	}
}

/* GetPoliciesParams contains all the parameters to send to the API endpoint
   for the get policies operation.

   Typically these are written to a http.Request.
*/
type GetPoliciesParams struct {

	/* Content.

	   return policy content (implies 'files')
	*/
	Content *bool

	/* Context.

	   context to use for context-aware overlay types (review, draft, stash). Usually the user ID. Empty/missing means return for all contexts
	*/
	ContextParam *string

	/* EmptyRoots.

	   return policy roots that have no policies according to other query parameters (default is on)
	*/
	EmptyRoots *bool

	/* FileMetadata.

	   return policy files metadata (implies 'files')
	*/
	FileMetadata *bool

	/* Files.

	   return policy file layout. When combined with `namespace` implies `modules`
	*/
	Files *bool

	/* Label.

	   return only files that has one or more labels e.g. label=key1:value1&label=key2:value2 (implies 'files')
	*/
	Label *string

	/* Labels.

	   return policy file labels (implies 'files')
	*/
	Labels *bool

	/* Modules.

	   return modules of each policy package (implies 'namespace)
	*/
	Modules *bool

	/* Namespace.

	   return policy namespace layout
	*/
	Namespace *bool

	/* Ns.

	   return only modules for the given rego namespace prefix
	*/
	Ns *string

	/* RegoMetadata.

	   return rego payload metadata (implies `rules`)
	*/
	RegoMetadata *bool

	/* RegoMetadataType.

	   return rego metadata only of a given type(s) (implies `rego-metadata`)
	*/
	RegoMetadataType *string

	/* Revisions.

	   return policy files revision (implies 'files')
	*/
	Revisions *bool

	/* Rules.

	   return rego rules metadata in addition to package metadata (implies `rego-metadata`)
	*/
	Rules *bool

	/* Type.

	   only return policies in specified overlay type(s). Valid types: published, protected, review, draft, stash
	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get policies params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPoliciesParams) WithDefaults() *GetPoliciesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get policies params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPoliciesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get policies params
func (o *GetPoliciesParams) WithTimeout(timeout time.Duration) *GetPoliciesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get policies params
func (o *GetPoliciesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get policies params
func (o *GetPoliciesParams) WithContext(ctx context.Context) *GetPoliciesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get policies params
func (o *GetPoliciesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get policies params
func (o *GetPoliciesParams) WithHTTPClient(client *http.Client) *GetPoliciesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get policies params
func (o *GetPoliciesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContent adds the content to the get policies params
func (o *GetPoliciesParams) WithContent(content *bool) *GetPoliciesParams {
	o.SetContent(content)
	return o
}

// SetContent adds the content to the get policies params
func (o *GetPoliciesParams) SetContent(content *bool) {
	o.Content = content
}

// WithContext adds the context to the get policies params
func (o *GetPoliciesParams) WithContextParam(context *string) *GetPoliciesParams {
	o.SetContextParam(context)
	return o
}

// SetContext adds the context to the get policies params
func (o *GetPoliciesParams) SetContextParam(context *string) {
	o.ContextParam = context
}

// WithEmptyRoots adds the emptyRoots to the get policies params
func (o *GetPoliciesParams) WithEmptyRoots(emptyRoots *bool) *GetPoliciesParams {
	o.SetEmptyRoots(emptyRoots)
	return o
}

// SetEmptyRoots adds the emptyRoots to the get policies params
func (o *GetPoliciesParams) SetEmptyRoots(emptyRoots *bool) {
	o.EmptyRoots = emptyRoots
}

// WithFileMetadata adds the fileMetadata to the get policies params
func (o *GetPoliciesParams) WithFileMetadata(fileMetadata *bool) *GetPoliciesParams {
	o.SetFileMetadata(fileMetadata)
	return o
}

// SetFileMetadata adds the fileMetadata to the get policies params
func (o *GetPoliciesParams) SetFileMetadata(fileMetadata *bool) {
	o.FileMetadata = fileMetadata
}

// WithFiles adds the files to the get policies params
func (o *GetPoliciesParams) WithFiles(files *bool) *GetPoliciesParams {
	o.SetFiles(files)
	return o
}

// SetFiles adds the files to the get policies params
func (o *GetPoliciesParams) SetFiles(files *bool) {
	o.Files = files
}

// WithLabel adds the label to the get policies params
func (o *GetPoliciesParams) WithLabel(label *string) *GetPoliciesParams {
	o.SetLabel(label)
	return o
}

// SetLabel adds the label to the get policies params
func (o *GetPoliciesParams) SetLabel(label *string) {
	o.Label = label
}

// WithLabels adds the labels to the get policies params
func (o *GetPoliciesParams) WithLabels(labels *bool) *GetPoliciesParams {
	o.SetLabels(labels)
	return o
}

// SetLabels adds the labels to the get policies params
func (o *GetPoliciesParams) SetLabels(labels *bool) {
	o.Labels = labels
}

// WithModules adds the modules to the get policies params
func (o *GetPoliciesParams) WithModules(modules *bool) *GetPoliciesParams {
	o.SetModules(modules)
	return o
}

// SetModules adds the modules to the get policies params
func (o *GetPoliciesParams) SetModules(modules *bool) {
	o.Modules = modules
}

// WithNamespace adds the namespace to the get policies params
func (o *GetPoliciesParams) WithNamespace(namespace *bool) *GetPoliciesParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the get policies params
func (o *GetPoliciesParams) SetNamespace(namespace *bool) {
	o.Namespace = namespace
}

// WithNs adds the ns to the get policies params
func (o *GetPoliciesParams) WithNs(ns *string) *GetPoliciesParams {
	o.SetNs(ns)
	return o
}

// SetNs adds the ns to the get policies params
func (o *GetPoliciesParams) SetNs(ns *string) {
	o.Ns = ns
}

// WithRegoMetadata adds the regoMetadata to the get policies params
func (o *GetPoliciesParams) WithRegoMetadata(regoMetadata *bool) *GetPoliciesParams {
	o.SetRegoMetadata(regoMetadata)
	return o
}

// SetRegoMetadata adds the regoMetadata to the get policies params
func (o *GetPoliciesParams) SetRegoMetadata(regoMetadata *bool) {
	o.RegoMetadata = regoMetadata
}

// WithRegoMetadataType adds the regoMetadataType to the get policies params
func (o *GetPoliciesParams) WithRegoMetadataType(regoMetadataType *string) *GetPoliciesParams {
	o.SetRegoMetadataType(regoMetadataType)
	return o
}

// SetRegoMetadataType adds the regoMetadataType to the get policies params
func (o *GetPoliciesParams) SetRegoMetadataType(regoMetadataType *string) {
	o.RegoMetadataType = regoMetadataType
}

// WithRevisions adds the revisions to the get policies params
func (o *GetPoliciesParams) WithRevisions(revisions *bool) *GetPoliciesParams {
	o.SetRevisions(revisions)
	return o
}

// SetRevisions adds the revisions to the get policies params
func (o *GetPoliciesParams) SetRevisions(revisions *bool) {
	o.Revisions = revisions
}

// WithRules adds the rules to the get policies params
func (o *GetPoliciesParams) WithRules(rules *bool) *GetPoliciesParams {
	o.SetRules(rules)
	return o
}

// SetRules adds the rules to the get policies params
func (o *GetPoliciesParams) SetRules(rules *bool) {
	o.Rules = rules
}

// WithType adds the typeVar to the get policies params
func (o *GetPoliciesParams) WithType(typeVar *string) *GetPoliciesParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get policies params
func (o *GetPoliciesParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetPoliciesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Content != nil {

		// query param content
		var qrContent bool

		if o.Content != nil {
			qrContent = *o.Content
		}
		qContent := swag.FormatBool(qrContent)
		if qContent != "" {

			if err := r.SetQueryParam("content", qContent); err != nil {
				return err
			}
		}
	}

	if o.Context != nil {

		// query param context
		var qrContext string

		if o.Context != nil {
			qrContext = *o.ContextParam
		}
		qContext := qrContext
		if qContext != "" {

			if err := r.SetQueryParam("context", qContext); err != nil {
				return err
			}
		}
	}

	if o.EmptyRoots != nil {

		// query param empty-roots
		var qrEmptyRoots bool

		if o.EmptyRoots != nil {
			qrEmptyRoots = *o.EmptyRoots
		}
		qEmptyRoots := swag.FormatBool(qrEmptyRoots)
		if qEmptyRoots != "" {

			if err := r.SetQueryParam("empty-roots", qEmptyRoots); err != nil {
				return err
			}
		}
	}

	if o.FileMetadata != nil {

		// query param file-metadata
		var qrFileMetadata bool

		if o.FileMetadata != nil {
			qrFileMetadata = *o.FileMetadata
		}
		qFileMetadata := swag.FormatBool(qrFileMetadata)
		if qFileMetadata != "" {

			if err := r.SetQueryParam("file-metadata", qFileMetadata); err != nil {
				return err
			}
		}
	}

	if o.Files != nil {

		// query param files
		var qrFiles bool

		if o.Files != nil {
			qrFiles = *o.Files
		}
		qFiles := swag.FormatBool(qrFiles)
		if qFiles != "" {

			if err := r.SetQueryParam("files", qFiles); err != nil {
				return err
			}
		}
	}

	if o.Label != nil {

		// query param label
		var qrLabel string

		if o.Label != nil {
			qrLabel = *o.Label
		}
		qLabel := qrLabel
		if qLabel != "" {

			if err := r.SetQueryParam("label", qLabel); err != nil {
				return err
			}
		}
	}

	if o.Labels != nil {

		// query param labels
		var qrLabels bool

		if o.Labels != nil {
			qrLabels = *o.Labels
		}
		qLabels := swag.FormatBool(qrLabels)
		if qLabels != "" {

			if err := r.SetQueryParam("labels", qLabels); err != nil {
				return err
			}
		}
	}

	if o.Modules != nil {

		// query param modules
		var qrModules bool

		if o.Modules != nil {
			qrModules = *o.Modules
		}
		qModules := swag.FormatBool(qrModules)
		if qModules != "" {

			if err := r.SetQueryParam("modules", qModules); err != nil {
				return err
			}
		}
	}

	if o.Namespace != nil {

		// query param namespace
		var qrNamespace bool

		if o.Namespace != nil {
			qrNamespace = *o.Namespace
		}
		qNamespace := swag.FormatBool(qrNamespace)
		if qNamespace != "" {

			if err := r.SetQueryParam("namespace", qNamespace); err != nil {
				return err
			}
		}
	}

	if o.Ns != nil {

		// query param ns
		var qrNs string

		if o.Ns != nil {
			qrNs = *o.Ns
		}
		qNs := qrNs
		if qNs != "" {

			if err := r.SetQueryParam("ns", qNs); err != nil {
				return err
			}
		}
	}

	if o.RegoMetadata != nil {

		// query param rego-metadata
		var qrRegoMetadata bool

		if o.RegoMetadata != nil {
			qrRegoMetadata = *o.RegoMetadata
		}
		qRegoMetadata := swag.FormatBool(qrRegoMetadata)
		if qRegoMetadata != "" {

			if err := r.SetQueryParam("rego-metadata", qRegoMetadata); err != nil {
				return err
			}
		}
	}

	if o.RegoMetadataType != nil {

		// query param rego-metadata-type
		var qrRegoMetadataType string

		if o.RegoMetadataType != nil {
			qrRegoMetadataType = *o.RegoMetadataType
		}
		qRegoMetadataType := qrRegoMetadataType
		if qRegoMetadataType != "" {

			if err := r.SetQueryParam("rego-metadata-type", qRegoMetadataType); err != nil {
				return err
			}
		}
	}

	if o.Revisions != nil {

		// query param revisions
		var qrRevisions bool

		if o.Revisions != nil {
			qrRevisions = *o.Revisions
		}
		qRevisions := swag.FormatBool(qrRevisions)
		if qRevisions != "" {

			if err := r.SetQueryParam("revisions", qRevisions); err != nil {
				return err
			}
		}
	}

	if o.Rules != nil {

		// query param rules
		var qrRules bool

		if o.Rules != nil {
			qrRules = *o.Rules
		}
		qRules := swag.FormatBool(qrRules)
		if qRules != "" {

			if err := r.SetQueryParam("rules", qRules); err != nil {
				return err
			}
		}
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

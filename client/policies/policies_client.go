// Code generated by go-swagger; DO NOT EDIT.

package policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new policies API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for policies API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BulkUploadPlaygroundPolicies(params *BulkUploadPlaygroundPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkUploadPlaygroundPoliciesOK, error)

	BulkUploadPolicies(params *BulkUploadPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkUploadPoliciesOK, error)

	BulkUploadSystemPolicies(params *BulkUploadSystemPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkUploadSystemPoliciesOK, error)

	CreatePolicies(params *CreatePoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePoliciesOK, error)

	CreatePoliciesAtPath(params *CreatePoliciesAtPathParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePoliciesAtPathOK, error)

	DeletePolicy(params *DeletePolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePolicyOK, error)

	GetPolicies(params *GetPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPoliciesOK, error)

	GetPoliciesAtPath(params *GetPoliciesAtPathParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPoliciesAtPathOK, error)

	GetPolicy(params *GetPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPolicyOK, error)

	ListPlaygroundPolicies(params *ListPlaygroundPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPlaygroundPoliciesOK, error)

	ListPolicies(params *ListPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPoliciesOK, error)

	ListSystemPolicies(params *ListSystemPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSystemPoliciesOK, error)

	PromotePolicies(params *PromotePoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PromotePoliciesOK, error)

	UpdatePolicy(params *UpdatePolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePolicyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BulkUploadPlaygroundPolicies bulks upload playground policies
*/
func (a *Client) BulkUploadPlaygroundPolicies(params *BulkUploadPlaygroundPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkUploadPlaygroundPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkUploadPlaygroundPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkUploadPlaygroundPolicies",
		Method:             "POST",
		PathPattern:        "/v1/policies/playground",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/gzip"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BulkUploadPlaygroundPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkUploadPlaygroundPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkUploadPlaygroundPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BulkUploadPolicies bulks upload policies
*/
func (a *Client) BulkUploadPolicies(params *BulkUploadPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkUploadPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkUploadPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkUploadPolicies",
		Method:             "POST",
		PathPattern:        "/v1/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/gzip"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BulkUploadPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkUploadPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkUploadPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BulkUploadSystemPolicies bulks upload system policies
*/
func (a *Client) BulkUploadSystemPolicies(params *BulkUploadSystemPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkUploadSystemPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkUploadSystemPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkUploadSystemPolicies",
		Method:             "POST",
		PathPattern:        "/v1/policies/systems/{system}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/gzip"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BulkUploadSystemPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkUploadSystemPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkUploadSystemPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreatePolicies creates policies
*/
func (a *Client) CreatePolicies(params *CreatePoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreatePolicies",
		Method:             "POST",
		PathPattern:        "/v2/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreatePolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreatePoliciesAtPath creates policies at path
*/
func (a *Client) CreatePoliciesAtPath(params *CreatePoliciesAtPathParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePoliciesAtPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePoliciesAtPathParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreatePoliciesAtPath",
		Method:             "POST",
		PathPattern:        "/v2/policies/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePoliciesAtPathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePoliciesAtPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreatePoliciesAtPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePolicy deletes a policy
*/
func (a *Client) DeletePolicy(params *DeletePolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeletePolicy",
		Method:             "DELETE",
		PathPattern:        "/v1/policies/{policy}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeletePolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPolicies gets policies
*/
func (a *Client) GetPolicies(params *GetPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPolicies",
		Method:             "GET",
		PathPattern:        "/v2/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPoliciesAtPath gets policies at path
*/
func (a *Client) GetPoliciesAtPath(params *GetPoliciesAtPathParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPoliciesAtPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPoliciesAtPathParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPoliciesAtPath",
		Method:             "GET",
		PathPattern:        "/v2/policies/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPoliciesAtPathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPoliciesAtPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPoliciesAtPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPolicy gets a policy
*/
func (a *Client) GetPolicy(params *GetPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPolicy",
		Method:             "GET",
		PathPattern:        "/v1/policies/{policy}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListPlaygroundPolicies lists playground policies
*/
func (a *Client) ListPlaygroundPolicies(params *ListPlaygroundPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPlaygroundPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPlaygroundPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListPlaygroundPolicies",
		Method:             "GET",
		PathPattern:        "/v1/policies/playground",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListPlaygroundPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPlaygroundPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListPlaygroundPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListPolicies lists policies
*/
func (a *Client) ListPolicies(params *ListPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListPolicies",
		Method:             "GET",
		PathPattern:        "/v1/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListSystemPolicies lists system policies
*/
func (a *Client) ListSystemPolicies(params *ListSystemPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSystemPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSystemPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListSystemPolicies",
		Method:             "GET",
		PathPattern:        "/v1/policies/systems/{system}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListSystemPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSystemPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListSystemPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PromotePolicies promotes policies
*/
func (a *Client) PromotePolicies(params *PromotePoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PromotePoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPromotePoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PromotePolicies",
		Method:             "PUT",
		PathPattern:        "/v2/policies/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PromotePoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PromotePoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PromotePolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdatePolicy updates a policy
*/
func (a *Client) UpdatePolicy(params *UpdatePolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdatePolicy",
		Method:             "PUT",
		PathPattern:        "/v1/policies/{policy}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdatePolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

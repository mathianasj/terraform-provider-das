// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/mathianasj/terraform-provider-das/client/activity"
	"github.com/mathianasj/terraform-provider-das/client/agents"
	"github.com/mathianasj/terraform-provider-das/client/authz"
	"github.com/mathianasj/terraform-provider-das/client/bundles"
	"github.com/mathianasj/terraform-provider-das/client/data"
	"github.com/mathianasj/terraform-provider-das/client/datasources"
	"github.com/mathianasj/terraform-provider-das/client/decisions"
	"github.com/mathianasj/terraform-provider-das/client/identity_providers"
	"github.com/mathianasj/terraform-provider-das/client/invitations"
	"github.com/mathianasj/terraform-provider-das/client/logreplay"
	"github.com/mathianasj/terraform-provider-das/client/logs"
	"github.com/mathianasj/terraform-provider-das/client/notifications"
	"github.com/mathianasj/terraform-provider-das/client/openapi"
	"github.com/mathianasj/terraform-provider-das/client/policies"
	"github.com/mathianasj/terraform-provider-das/client/relay_server"
	"github.com/mathianasj/terraform-provider-das/client/secrets"
	"github.com/mathianasj/terraform-provider-das/client/stacks"
	"github.com/mathianasj/terraform-provider-das/client/status"
	"github.com/mathianasj/terraform-provider-das/client/systems"
	"github.com/mathianasj/terraform-provider-das/client/timeseries"
	"github.com/mathianasj/terraform-provider-das/client/tokens"
	"github.com/mathianasj/terraform-provider-das/client/users"
	"github.com/mathianasj/terraform-provider-das/client/workspace"
)

// Default styra API HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http"}

// NewHTTPClient creates a new styra API HTTP client.
func NewHTTPClient(formats strfmt.Registry) *StyraAPI {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new styra API HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *StyraAPI {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new styra API client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *StyraAPI {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(StyraAPI)
	cli.Transport = transport
	cli.Activity = activity.New(transport, formats)
	cli.Agents = agents.New(transport, formats)
	cli.Authz = authz.New(transport, formats)
	cli.Bundles = bundles.New(transport, formats)
	cli.Data = data.New(transport, formats)
	cli.Datasources = datasources.New(transport, formats)
	cli.Decisions = decisions.New(transport, formats)
	cli.IdentityProviders = identity_providers.New(transport, formats)
	cli.Invitations = invitations.New(transport, formats)
	cli.Logreplay = logreplay.New(transport, formats)
	cli.Logs = logs.New(transport, formats)
	cli.Notifications = notifications.New(transport, formats)
	cli.Openapi = openapi.New(transport, formats)
	cli.Policies = policies.New(transport, formats)
	cli.RelayServer = relay_server.New(transport, formats)
	cli.Secrets = secrets.New(transport, formats)
	cli.Stacks = stacks.New(transport, formats)
	cli.Status = status.New(transport, formats)
	cli.Systems = systems.New(transport, formats)
	cli.Timeseries = timeseries.New(transport, formats)
	cli.Tokens = tokens.New(transport, formats)
	cli.Users = users.New(transport, formats)
	cli.Workspace = workspace.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// StyraAPI is a client for styra API
type StyraAPI struct {
	Activity activity.ClientService

	Agents agents.ClientService

	Authz authz.ClientService

	Bundles bundles.ClientService

	Data data.ClientService

	Datasources datasources.ClientService

	Decisions decisions.ClientService

	IdentityProviders identity_providers.ClientService

	Invitations invitations.ClientService

	Logreplay logreplay.ClientService

	Logs logs.ClientService

	Notifications notifications.ClientService

	Openapi openapi.ClientService

	Policies policies.ClientService

	RelayServer relay_server.ClientService

	Secrets secrets.ClientService

	Stacks stacks.ClientService

	Status status.ClientService

	Systems systems.ClientService

	Timeseries timeseries.ClientService

	Tokens tokens.ClientService

	Users users.ClientService

	Workspace workspace.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *StyraAPI) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.Activity.SetTransport(transport)
	c.Agents.SetTransport(transport)
	c.Authz.SetTransport(transport)
	c.Bundles.SetTransport(transport)
	c.Data.SetTransport(transport)
	c.Datasources.SetTransport(transport)
	c.Decisions.SetTransport(transport)
	c.IdentityProviders.SetTransport(transport)
	c.Invitations.SetTransport(transport)
	c.Logreplay.SetTransport(transport)
	c.Logs.SetTransport(transport)
	c.Notifications.SetTransport(transport)
	c.Openapi.SetTransport(transport)
	c.Policies.SetTransport(transport)
	c.RelayServer.SetTransport(transport)
	c.Secrets.SetTransport(transport)
	c.Stacks.SetTransport(transport)
	c.Status.SetTransport(transport)
	c.Systems.SetTransport(transport)
	c.Timeseries.SetTransport(transport)
	c.Tokens.SetTransport(transport)
	c.Users.SetTransport(transport)
	c.Workspace.SetTransport(transport)
}

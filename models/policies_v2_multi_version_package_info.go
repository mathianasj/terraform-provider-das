// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PoliciesV2MultiVersionPackageInfo policies v2 multi version package info
//
// swagger:model policies.v2.MultiVersionPackageInfo
type PoliciesV2MultiVersionPackageInfo struct {

	// draft
	Draft map[string]PoliciesV2PackageInfo `json:"draft,omitempty"`

	// protected
	Protected *PoliciesV2PackageInfo `json:"protected,omitempty"`

	// published
	Published *PoliciesV2PackageInfo `json:"published,omitempty"`

	// review
	Review map[string]PoliciesV2PackageInfo `json:"review,omitempty"`

	// stash
	Stash map[string]PoliciesV2PackageInfo `json:"stash,omitempty"`
}

// Validate validates this policies v2 multi version package info
func (m *PoliciesV2MultiVersionPackageInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDraft(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublished(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReview(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PoliciesV2MultiVersionPackageInfo) validateDraft(formats strfmt.Registry) error {
	if swag.IsZero(m.Draft) { // not required
		return nil
	}

	for k := range m.Draft {

		if err := validate.Required("draft"+"."+k, "body", m.Draft[k]); err != nil {
			return err
		}
		if val, ok := m.Draft[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("draft" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("draft" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *PoliciesV2MultiVersionPackageInfo) validateProtected(formats strfmt.Registry) error {
	if swag.IsZero(m.Protected) { // not required
		return nil
	}

	if m.Protected != nil {
		if err := m.Protected.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protected")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protected")
			}
			return err
		}
	}

	return nil
}

func (m *PoliciesV2MultiVersionPackageInfo) validatePublished(formats strfmt.Registry) error {
	if swag.IsZero(m.Published) { // not required
		return nil
	}

	if m.Published != nil {
		if err := m.Published.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("published")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("published")
			}
			return err
		}
	}

	return nil
}

func (m *PoliciesV2MultiVersionPackageInfo) validateReview(formats strfmt.Registry) error {
	if swag.IsZero(m.Review) { // not required
		return nil
	}

	for k := range m.Review {

		if err := validate.Required("review"+"."+k, "body", m.Review[k]); err != nil {
			return err
		}
		if val, ok := m.Review[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("review" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("review" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *PoliciesV2MultiVersionPackageInfo) validateStash(formats strfmt.Registry) error {
	if swag.IsZero(m.Stash) { // not required
		return nil
	}

	for k := range m.Stash {

		if err := validate.Required("stash"+"."+k, "body", m.Stash[k]); err != nil {
			return err
		}
		if val, ok := m.Stash[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stash" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stash" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this policies v2 multi version package info based on the context it is used
func (m *PoliciesV2MultiVersionPackageInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDraft(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtected(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePublished(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReview(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStash(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PoliciesV2MultiVersionPackageInfo) contextValidateDraft(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Draft {

		if val, ok := m.Draft[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *PoliciesV2MultiVersionPackageInfo) contextValidateProtected(ctx context.Context, formats strfmt.Registry) error {

	if m.Protected != nil {
		if err := m.Protected.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protected")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protected")
			}
			return err
		}
	}

	return nil
}

func (m *PoliciesV2MultiVersionPackageInfo) contextValidatePublished(ctx context.Context, formats strfmt.Registry) error {

	if m.Published != nil {
		if err := m.Published.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("published")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("published")
			}
			return err
		}
	}

	return nil
}

func (m *PoliciesV2MultiVersionPackageInfo) contextValidateReview(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Review {

		if val, ok := m.Review[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *PoliciesV2MultiVersionPackageInfo) contextValidateStash(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Stash {

		if val, ok := m.Stash[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PoliciesV2MultiVersionPackageInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PoliciesV2MultiVersionPackageInfo) UnmarshalBinary(b []byte) error {
	var res PoliciesV2MultiVersionPackageInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

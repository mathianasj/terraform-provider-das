// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkspaceV1KafkaConfig workspace v1 kafka config
//
// swagger:model workspace.v1.KafkaConfig
type WorkspaceV1KafkaConfig struct {

	// Kafka authentication mechanism: OPEN, PLAINTEXT, SASL
	// Required: true
	Authentication *string `json:"authentication"`

	// Kafka brokers
	// Required: true
	Brokers []string `json:"brokers"`

	// Compression mechanism: GZIP, SNAPPY, LZ4, ZSTD
	Compression string `json:"compression,omitempty"`

	// Enable Kafka idempotent exactly once reliablity semantics
	Idempotent bool `json:"idempotent,omitempty"`

	// Max message size
	MaxMessageSize *int32 `json:"max_message_size,omitempty"`

	// Max send retries
	MaxRetries *int32 `json:"max_retries,omitempty"`

	// Kafka PlainText authentication
	Plain *WorkspaceV1KafkaPlain `json:"plain,omitempty"`

	// Required acks: WaitForLocal, WaitForAll replica ack(s)
	// Required: true
	RequiredAcks *string `json:"required_acks"`

	// Kafka SASL authentication
	Sasl *WorkspaceV1KafkaSasl `json:"sasl,omitempty"`

	// Message timeout duration
	Timeout *string `json:"timeout,omitempty"`

	// Kafka TLS
	TLS *WorkspaceV1KafkaTLS `json:"tls,omitempty"`

	// Kafka topic
	// Required: true
	Topic *string `json:"topic"`

	// Kafka version: e.g. 2.0.0
	Version string `json:"version,omitempty"`
}

// Validate validates this workspace v1 kafka config
func (m *WorkspaceV1KafkaConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBrokers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequiredAcks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSasl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTLS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopic(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspaceV1KafkaConfig) validateAuthentication(formats strfmt.Registry) error {

	if err := validate.Required("authentication", "body", m.Authentication); err != nil {
		return err
	}

	return nil
}

func (m *WorkspaceV1KafkaConfig) validateBrokers(formats strfmt.Registry) error {

	if err := validate.Required("brokers", "body", m.Brokers); err != nil {
		return err
	}

	return nil
}

func (m *WorkspaceV1KafkaConfig) validatePlain(formats strfmt.Registry) error {
	if swag.IsZero(m.Plain) { // not required
		return nil
	}

	if m.Plain != nil {
		if err := m.Plain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("plain")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceV1KafkaConfig) validateRequiredAcks(formats strfmt.Registry) error {

	if err := validate.Required("required_acks", "body", m.RequiredAcks); err != nil {
		return err
	}

	return nil
}

func (m *WorkspaceV1KafkaConfig) validateSasl(formats strfmt.Registry) error {
	if swag.IsZero(m.Sasl) { // not required
		return nil
	}

	if m.Sasl != nil {
		if err := m.Sasl.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sasl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sasl")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceV1KafkaConfig) validateTLS(formats strfmt.Registry) error {
	if swag.IsZero(m.TLS) { // not required
		return nil
	}

	if m.TLS != nil {
		if err := m.TLS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tls")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tls")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceV1KafkaConfig) validateTopic(formats strfmt.Registry) error {

	if err := validate.Required("topic", "body", m.Topic); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this workspace v1 kafka config based on the context it is used
func (m *WorkspaceV1KafkaConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePlain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSasl(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTLS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspaceV1KafkaConfig) contextValidatePlain(ctx context.Context, formats strfmt.Registry) error {

	if m.Plain != nil {
		if err := m.Plain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("plain")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceV1KafkaConfig) contextValidateSasl(ctx context.Context, formats strfmt.Registry) error {

	if m.Sasl != nil {
		if err := m.Sasl.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sasl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sasl")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceV1KafkaConfig) contextValidateTLS(ctx context.Context, formats strfmt.Registry) error {

	if m.TLS != nil {
		if err := m.TLS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tls")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tls")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkspaceV1KafkaConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspaceV1KafkaConfig) UnmarshalBinary(b []byte) error {
	var res WorkspaceV1KafkaConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

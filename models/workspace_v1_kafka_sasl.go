// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkspaceV1KafkaSasl workspace v1 kafka sasl
//
// swagger:model workspace.v1.KafkaSasl
type WorkspaceV1KafkaSasl struct {

	// SASL mechanism: PLAIN, SCRAM-SHA-256, SCRAM-SHA-512
	// Required: true
	Mechanism *string `json:"mechanism"`

	// Kafka SASL authentication
	Plain *WorkspaceV1KafkaPlain `json:"plain,omitempty"`

	// SASL version defaults to 1 (set to 0 for Azure Event Hub)
	// Required: true
	Version *int32 `json:"version"`
}

// Validate validates this workspace v1 kafka sasl
func (m *WorkspaceV1KafkaSasl) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMechanism(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspaceV1KafkaSasl) validateMechanism(formats strfmt.Registry) error {

	if err := validate.Required("mechanism", "body", m.Mechanism); err != nil {
		return err
	}

	return nil
}

func (m *WorkspaceV1KafkaSasl) validatePlain(formats strfmt.Registry) error {
	if swag.IsZero(m.Plain) { // not required
		return nil
	}

	if m.Plain != nil {
		if err := m.Plain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("plain")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceV1KafkaSasl) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this workspace v1 kafka sasl based on the context it is used
func (m *WorkspaceV1KafkaSasl) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePlain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspaceV1KafkaSasl) contextValidatePlain(ctx context.Context, formats strfmt.Registry) error {

	if m.Plain != nil {
		if err := m.Plain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("plain")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkspaceV1KafkaSasl) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspaceV1KafkaSasl) UnmarshalBinary(b []byte) error {
	var res WorkspaceV1KafkaSasl
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

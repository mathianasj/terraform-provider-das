// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkspaceV1KafkaVerifyResponse workspace v1 kafka verify response
//
// swagger:model workspace.v1.KafkaVerifyResponse
type WorkspaceV1KafkaVerifyResponse struct {

	// kafka code
	// Required: true
	KafkaCode *string `json:"kafka_code"`

	// kafka message
	// Required: true
	KafkaMessage *string `json:"kafka_message"`

	// request id
	RequestID string `json:"request_id,omitempty"`
}

// Validate validates this workspace v1 kafka verify response
func (m *WorkspaceV1KafkaVerifyResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKafkaCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKafkaMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspaceV1KafkaVerifyResponse) validateKafkaCode(formats strfmt.Registry) error {

	if err := validate.Required("kafka_code", "body", m.KafkaCode); err != nil {
		return err
	}

	return nil
}

func (m *WorkspaceV1KafkaVerifyResponse) validateKafkaMessage(formats strfmt.Registry) error {

	if err := validate.Required("kafka_message", "body", m.KafkaMessage); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this workspace v1 kafka verify response based on context it is used
func (m *WorkspaceV1KafkaVerifyResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WorkspaceV1KafkaVerifyResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspaceV1KafkaVerifyResponse) UnmarshalBinary(b []byte) error {
	var res WorkspaceV1KafkaVerifyResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
